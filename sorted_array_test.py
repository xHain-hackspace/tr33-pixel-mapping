import socket
import time
import random
import cv2
import numpy as np

GAUSSIAN_BLUR_SIZE = 11

sorted_0_array = [[17,89],
[17,88],
[17,87],
[17,86],
[17,85],
[17,84],
[17,83],
[17,82],
[17,66],
[17,65],
[17,81],
[17,80],
[17,63],
[17,79],
[17,62],
[17,78],
[15,80],
[15,81],
[17,64],
[15,82],
[15,83],
[15,84],
[15,79],
[15,85],
[15,86],
[15,87],
[15,88],
[15,89],
[19,67],
[19,68],
[19,66],
[19,65],
[15,78],
[19,69],
[17,70],
[19,64],
[19,70],
[19,71],
[19,61],
[19,60],
[19,72],
[19,62],
[19,63],
[17,69],
[19,73],
[15,77],
[19,59],
[19,79],
[19,74],
[19,78],
[19,75],
[19,77],
[19,76],
[19,58],
[15,76],
[17,61],
[17,60],
[19,57],
[17,59],
[15,75],
[17,58],
[17,57],
[19,56],
[17,56],
[15,74],
[19,55],
[17,55],
[19,54],
[15,73],
[17,54],
[19,53],
[19,50],
[19,51],
[19,48],
[19,49],
[19,52],
[15,72],
[15,62],
[19,46],
[19,47],
[15,68],
[19,45],
[19,44],
[19,43],
[15,69],
[17,53],
[14,80],
[19,42],
[17,52],
[17,51],
[17,50],
[17,48],
[15,71],
[17,49],
[17,47],
[17,46],
[17,45],
[15,61],
[17,44],
[17,43],
[15,63],
[15,64],
[15,65],
[15,66],
[15,67],
[15,70],
[19,41],
[14,81],
[14,82],
[14,83],
[17,42],
[14,84],
[14,85],
[14,76],
[14,77],
[14,86],
[14,79],
[14,78],
[14,87],
[14,75],
[19,40],
[14,88],
[14,74],
[14,89],
[15,60],
[14,73],
[17,41],
[19,39],
[17,40],
[15,59],
[17,39],
[15,58],
[19,38],
[14,72],
[14,71],
[14,70],
[19,37],
[17,38],
[15,55],
[14,69],
[15,56],
[15,57],
[14,68],
[14,67],
[17,37],
[19,36],
[14,66],
[15,54],
[15,42],
[17,36],
[14,65],
[15,43],
[17,33],
[17,35],
[15,41],
[17,32],
[17,34],
[15,53],
[19,35],
[17,31],
[14,64],
[15,44],
[17,30],
[14,63],
[15,40],
[15,45],
[15,52],
[19,34],
[17,29],
[15,51],
[15,50],
[15,46],
[17,28],
[15,39],
[15,47],
[9,65],
[15,48],
[19,33],
[9,66],
[15,49],
[9,67],
[9,68],
[9,63],
[15,38],
[17,27],
[9,69],
[19,32],
[14,62],
[9,70],
[19,31],
[15,37],
[9,62],
[9,71],
[9,75],
[9,64],
[9,72],
[9,73],
[17,26],
[14,54],
[9,74],
[19,30],
[15,36],
[14,55],
[14,61],
[9,61],
[9,60],
[14,60],
[9,76],
[14,52],
[14,53],
[9,59],
[14,56],
[15,35],
[19,29],
[17,25],
[14,51],
[9,77],
[14,57],
[14,59],
[14,58],
[17,24],
[9,58],
[15,34],
[9,78],
[17,23],
[19,28],
[15,33],
[14,50],
[9,79],
[9,57],
[17,22],
[15,32],
[19,27],
[14,49],
[9,80],
[9,56],
[14,48],
[9,81],
[17,21],
[19,26],
[15,31],
[9,82],
[14,47],
[9,87],
[9,88],
[9,89],
[9,53],
[9,83],
[9,86],
[9,84],
[9,85],
[9,54],
[9,52],
[19,25],
[9,55],
[10,60],
[14,46],
[9,51],
[17,20],
[10,56],
[10,61],
[10,62],
[10,55],
[9,50],
[14,45],
[10,63],
[17,19],
[15,30],
[10,64],
[10,57],
[19,24],
[17,18],
[10,65],
[10,54],
[14,44],
[10,66],
[17,17],
[10,58],
[10,67],
[14,43],
[10,53],
[9,49],
[17,16],
[15,29],
[19,23],
[10,68],
[10,59],
[14,42],
[10,69],
[10,52],
[17,15],
[15,28],
[14,41],
[14,40],
[9,48],
[15,27],
[10,70],
[14,39],
[19,22],
[9,47],
[10,51],
[10,71],
[14,38],
[14,37],
[17,14],
[14,36],
[10,72],
[10,50],
[15,26],
[19,21],
[14,35],
[9,46],
[10,73],
[10,49],
[15,25],
[17,13],
[14,34],
[10,74],
[19,20],
[10,75],
[10,79],
[10,78],
[9,45],
[10,48],
[15,24],
[10,76],
[19,19],
[10,77],
[10,89],
[10,88],
[10,87],
[10,47],
[14,31],
[17,11],
[10,86],
[17,12],
[14,30],
[9,44],
[15,21],
[10,85],
[14,29],
[19,18],
[10,84],
[10,46],
[10,80],
[10,83],
[15,20],
[17,4],
[14,28],
[10,81],
[17,5],
[10,82],
[17,3],
[9,37],
[17,6],
[14,27],
[9,36],
[9,43],
[9,32],
[15,19],
[9,35],
[9,34],
[9,33],
[14,26],
[17,2],
[9,38],
[17,7],
[9,31],
[14,33],
[17,1],
[19,14],
[14,25],
[15,18],
[10,45],
[9,30],
[9,39],
[17,8],
[19,13],
[17,9],
[9,42],
[14,24],
[17,10],
[19,15],
[15,17],
[9,40],
[14,23],
[19,12],
[10,44],
[19,16],
[14,22],
[17,0],
[19,11],
[10,43],
[14,21],
[15,16],
[9,29],
[19,17],
[15,23],
[14,32],
[19,10],
[14,20],
[15,22],
[9,41],
[19,9],
[15,15],
[14,19],
[19,8],
[19,7],
[14,18],
[10,42],
[15,14],
[14,17],
[9,28],
[14,16],
[10,41],
[19,6],
[15,13],
[19,4],
[19,5],
[14,15],
[15,12],
[10,40],
[18,64],
[19,3],
[15,11],
[18,65],
[18,66],
[9,27],
[15,10],
[14,14],
[18,62],
[18,63],
[18,57],
[18,56],
[19,2],
[18,67],
[10,39],
[15,9],
[15,8],
[14,13],
[15,7],
[15,6],
[9,26],
[18,61],
[18,58],
[19,1],
[15,5],
[10,38],
[15,1],
[15,4],
[14,12],
[18,55],
[18,59],
[15,2],
[15,3],
[18,60],
[10,37],
[18,68],
[10,36],
[14,11],
[10,35],
[9,25],
[15,0],
[19,0],
[14,10],
[18,54],
[14,9],
[14,7],
[18,79],
[14,8],
[9,24],
[18,69],
[18,53],
[14,6],
[14,5],
[14,4],
[18,50],
[10,34],
[14,3],
[18,52],
[18,51],
[18,49],
[14,1],
[14,2],
[18,48],
[14,0],
[18,47],
[10,33],
[18,70],
[18,72],
[9,23],
[18,46],
[18,73],
[18,78],
[10,32],
[18,74],
[18,77],
[9,12],
[18,44],
[10,31],
[18,71],
[18,76],
[9,13],
[9,11],
[9,22],
[10,30],
[9,10],
[9,9],
[18,75],
[9,8],
[18,40],
[9,14],
[18,41],
[18,43],
[9,7],
[18,42],
[18,45],
[9,6],
[9,15],
[10,29],
[18,39],
[9,21],
[9,1],
[9,5],
[9,4],
[10,12],
[9,3],
[9,2],
[9,0],
[9,16],
[10,11],
[9,20],
[10,13],
[10,10],
[10,28],
[18,80],
[10,15],
[10,14],
[10,9],
[18,81],
[10,8],
[18,82],
[9,19],
[10,16],
[18,38],
[9,17],
[10,7],
[18,83],
[10,27],
[18,84],
[9,18],
[18,85],
[18,86],
[18,87],
[18,89],
[10,18],
[18,88],
[10,17],
[10,26],
[10,19],
[18,37],
[10,6],
[10,20],
[18,36],
[18,35],
[10,0],
[10,21],
[10,25],
[18,34],
[10,4],
[10,5],
[10,23],
[10,24],
[10,22],
[10,1],
[18,33],
[10,3],
[10,2],
[13,45],
[18,1],
[18,0],
[18,32],
[18,30],
[13,44],
[13,46],
[13,47],
[13,48],
[18,29],
[13,49],
[13,43],
[18,2],
[13,50],
[13,51],
[18,28],
[13,60],
[13,42],
[13,52],
[18,27],
[13,53],
[13,58],
[13,55],
[13,57],
[13,56],
[13,54],
[18,26],
[13,40],
[13,41],
[13,61],
[13,59],
[18,3],
[18,20],
[18,21],
[18,22],
[13,39],
[18,25],
[18,10],
[18,11],
[18,19],
[18,17],
[18,23],
[18,24],
[18,18],
[18,9],
[18,16],
[18,8],
[18,12],
[18,15],
[18,14],
[18,13],
[16,0],
[13,38],
[18,4],
[18,7],
[13,37],
[13,66],
[13,36],
[16,1],
[13,35],
[13,0],
[13,1],
[16,2],
[18,5],
[11,0],
[13,34],
[13,65],
[18,6],
[13,67],
[13,33],
[13,32],
[16,3],
[13,62],
[13,31],
[11,1],
[13,30],
[13,68],
[13,29],
[13,28],
[13,27],
[16,4],
[13,69],
[13,26],
[11,2],
[13,2],
[13,25],
[13,24],
[16,5],
[13,23],
[13,63],
[13,70],
[13,22],
[13,3],
[11,3],
[13,16],
[13,21],
[13,20],
[13,18],
[13,19],
[13,15],
[13,17],
[13,14],
[13,71],
[13,8],
[13,9],
[13,4],
[16,6],
[13,7],
[13,10],
[13,64],
[13,5],
[13,6],
[11,4],
[13,13],
[13,12],
[16,7],
[13,72],
[13,11],
[16,8],
[13,73],
[16,9],
[11,5],
[16,10],
[16,11],
[16,47],
[16,12],
[13,74],
[16,46],
[16,48],
[16,13],
[16,45],
[16,51],
[16,14],
[16,50],
[11,6],
[13,75],
[16,44],
[16,49],
[16,52],
[16,43],
[16,15],
[16,42],
[11,7],
[13,76],
[16,16],
[16,41],
[16,53],
[16,40],
[16,17],
[11,8],
[16,39],
[13,77],
[16,18],
[16,38],
[16,54],
[11,9],
[16,19],
[16,36],
[16,37],
[16,35],
[13,78],
[16,20],
[11,10],
[16,34],
[16,55],
[16,21],
[16,24],
[16,25],
[16,33],
[13,79],
[16,26],
[16,32],
[16,27],
[16,23],
[16,22],
[16,28],
[16,31],
[16,30],
[16,29],
[16,56],
[11,11],
[13,80],
[13,81],
[11,12],
[16,57],
[11,13],
[11,14],
[11,15],
[13,82],
[11,16],
[16,58],
[13,83],
[11,17],
[13,84],
[16,59],
[11,18],
[13,85],
[11,43],
[11,42],
[16,60],
[11,41],
[13,86],
[11,47],
[11,24],
[11,26],
[11,25],
[13,87],
[11,40],
[11,23],
[11,19],
[11,22],
[11,20],
[11,21],
[11,31],
[16,61],
[11,39],
[11,48],
[11,38],
[13,88],
[11,32],
[16,62],
[11,46],
[11,29],
[13,89],
[11,49],
[16,63],
[11,30],
[11,45],
[11,33],
[11,37],
[11,36],
[11,35],
[16,64],
[11,34],
[11,44],
[11,50],
[16,65],
[11,28],
[16,66],
[11,27],
[11,51],
[16,67],
[11,52],
[16,68],
[11,53],
[16,69],
[11,54],
[16,70],
[11,55],
[16,71],
[11,56],
[16,72],
[11,57],
[16,73],
[16,75],
[16,74],
[16,76],
[11,58],
[16,77],
[11,59],
[16,78],
[16,79],
[11,60],
[16,80],
[16,81],
[11,61],
[16,82],
[16,83],
[11,62],
[16,84],
[16,87],
[16,85],
[16,86],
[16,88],
[11,63],
[16,89],
[11,64],
[11,65],
[11,66],
[11,67],
[11,68],
[11,69],
[11,70],
[11,71],
[11,72],
[11,73],
[11,74],
[11,75],
[11,76],
[11,77],
[11,78],
[11,79],
[11,80],
[11,81],
[11,82],
[11,83],
[11,84],
[11,85],
[11,86],
[11,87],
[11,88],
[11,89]]

sorted_1_array = [[13,89],
[13,88],
[13,87],
[16,86],
[16,85],
[13,86],
[16,87],
[16,88],
[16,84],
[13,85],
[16,89],
[10,89],
[16,83],
[13,84],
[18,89],
[10,88],
[16,82],
[18,88],
[13,83],
[16,81],
[10,87],
[18,87],
[16,80],
[13,82],
[10,86],
[16,79],
[13,81],
[18,86],
[16,78],
[10,85],
[13,80],
[16,77],
[18,85],
[16,76],
[13,79],
[10,84],
[16,75],
[18,84],
[13,78],
[16,74],
[10,78],
[10,83],
[9,89],
[16,73],
[18,79],
[10,77],
[18,78],
[13,77],
[10,79],
[18,83],
[18,77],
[9,88],
[16,72],
[10,76],
[10,82],
[18,76],
[9,87],
[11,89],
[13,76],
[16,71],
[10,81],
[18,82],
[10,75],
[9,86],
[10,80],
[18,75],
[18,81],
[11,88],
[16,70],
[13,75],
[18,80],
[10,74],
[9,85],
[16,69],
[18,74],
[18,73],
[11,87],
[13,74],
[16,68],
[10,73],
[16,67],
[13,73],
[18,72],
[18,71],
[11,86],
[13,72],
[16,66],
[10,72],
[9,84],
[18,70],
[13,71],
[11,85],
[18,69],
[14,89],
[13,70],
[18,68],
[18,66],
[18,65],
[10,71],
[18,67],
[14,88],
[18,64],
[16,65],
[18,63],
[13,69],
[14,87],
[11,84],
[9,83],
[13,68],
[10,70],
[13,64],
[18,62],
[9,73],
[14,86],
[13,67],
[13,63],
[18,61],
[9,74],
[11,83],
[16,64],
[9,72],
[10,69],
[13,66],
[13,62],
[9,75],
[13,65],
[18,60],
[9,82],
[9,71],
[14,85],
[10,68],
[11,82],
[13,61],
[16,63],
[18,59],
[13,60],
[13,59],
[9,76],
[11,81],
[10,67],
[9,81],
[13,58],
[18,58],
[14,84],
[9,70],
[10,66],
[14,80],
[18,57],
[16,62],
[11,80],
[13,57],
[18,56],
[9,77],
[10,65],
[9,80],
[11,79],
[14,83],
[10,64],
[9,78],
[18,55],
[9,79],
[16,61],
[11,78],
[9,69],
[13,56],
[10,63],
[11,77],
[10,57],
[14,82],
[11,71],
[18,54],
[10,58],
[14,78],
[11,70],
[10,62],
[14,77],
[16,60],
[10,56],
[11,76],
[11,72],
[18,53],
[14,76],
[16,49],
[14,81],
[11,69],
[11,73],
[14,79],
[16,48],
[10,61],
[16,46],
[18,52],
[11,75],
[11,74],
[13,55],
[9,68],
[10,55],
[10,60],
[9,60],
[11,68],
[9,59],
[14,75],
[16,47],
[16,50],
[16,59],
[10,54],
[9,61],
[11,67],
[9,58],
[18,51],
[10,53],
[13,54],
[11,66],
[16,58],
[14,72],
[10,52],
[9,62],
[9,67],
[9,57],
[14,74],
[10,51],
[11,65],
[14,71],
[16,57],
[16,51],
[18,50],
[13,53],
[14,70],
[16,56],
[10,50],
[9,46],
[9,66],
[14,69],
[9,56],
[16,52],
[9,63],
[14,68],
[16,55],
[11,64],
[9,47],
[16,53],
[9,50],
[18,49],
[14,73],
[16,45],
[14,67],
[15,58],
[16,54],
[14,66],
[14,65],
[10,49],
[13,52],
[9,51],
[9,65],
[15,59],
[10,48],
[11,63],
[18,48],
[14,64],
[14,63],
[9,52],
[14,62],
[15,60],
[9,55],
[13,51],
[9,54],
[10,47],
[9,53],
[18,47],
[11,62],
[14,61],
[13,50],
[18,46],
[14,60],
[13,49],
[16,44],
[11,61],
[15,61],
[13,48],
[10,46],
[18,44],
[11,60],
[18,38],
[10,45],
[13,47],
[15,69],
[15,68],
[18,39],
[11,59],
[18,40],
[15,62],
[13,46],
[10,44],
[16,43],
[17,62],
[13,41],
[11,58],
[11,57],
[18,41],
[17,63],
[11,56],
[10,43],
[10,59],
[11,55],
[13,42],
[9,49],
[18,42],
[9,48],
[16,42],
[15,80],
[14,59],
[11,54],
[17,64],
[9,45],
[18,43],
[11,53],
[13,40],
[10,40],
[14,58],
[15,81],
[13,43],
[9,44],
[10,41],
[10,42],
[11,52],
[16,41],
[11,51],
[17,65],
[13,44],
[11,50],
[14,57],
[9,43],
[11,49],
[15,82],
[11,48],
[13,45],
[18,45],
[14,56],
[11,47],
[15,57],
[15,83],
[15,85],
[17,66],
[10,39],
[13,39],
[15,86],
[15,84],
[9,42],
[11,46],
[18,37],
[14,55],
[16,40],
[15,87],
[11,45],
[15,56],
[15,55],
[15,88],
[10,38],
[13,38],
[11,44],
[14,54],
[15,89],
[9,64],
[16,39],
[15,54],
[15,63],
[10,37],
[18,36],
[13,37],
[10,36],
[9,38],
[16,38],
[15,53],
[9,39],
[14,53],
[9,40],
[15,64],
[9,37],
[9,41],
[10,35],
[18,35],
[13,36],
[17,84],
[17,85],
[17,86],
[17,87],
[16,37],
[17,88],
[17,89],
[10,34],
[14,52],
[17,83],
[9,36],
[15,65],
[15,52],
[18,34],
[15,51],
[13,35],
[11,43],
[10,33],
[15,50],
[14,34],
[15,66],
[14,51],
[16,36],
[9,35],
[15,79],
[18,33],
[17,82],
[11,42],
[15,67],
[13,34],
[15,78],
[16,35],
[15,49],
[14,35],
[17,81],
[9,34],
[15,77],
[14,33],
[18,32],
[15,75],
[15,76],
[10,32],
[17,80],
[16,34],
[11,41],
[15,74],
[13,33],
[17,79],
[15,48],
[16,33],
[15,70],
[14,48],
[17,78],
[15,73],
[9,33],
[14,36],
[15,47],
[17,42],
[10,31],
[15,71],
[14,49],
[15,72],
[14,50],
[14,32],
[17,69],
[14,47],
[17,70],
[11,40],
[10,30],
[16,32],
[15,46],
[13,32],
[14,31],
[17,41],
[14,37],
[9,32],
[18,30],
[15,45],
[14,46],
[10,29],
[11,39],
[17,40],
[13,31],
[16,31],
[17,43],
[14,30],
[17,39],
[14,45],
[18,29],
[10,28],
[14,38],
[15,44],
[17,38],
[11,38],
[13,30],
[16,30],
[9,31],
[14,29],
[14,44],
[14,39],
[17,44],
[10,27],
[17,61],
[18,28],
[17,37],
[15,43],
[13,29],
[9,30],
[14,40],
[14,43],
[16,29],
[11,37],
[14,41],
[14,42],
[9,29],
[17,60],
[14,28],
[10,26],
[18,27],
[17,45],
[17,36],
[9,28],
[13,28],
[11,36],
[17,59],
[16,28],
[14,27],
[15,42],
[10,25],
[18,26],
[9,27],
[17,35],
[9,26],
[17,46],
[17,58],
[13,27],
[14,26],
[16,27],
[11,35],
[9,25],
[18,25],
[10,24],
[9,24],
[15,41],
[17,47],
[17,57],
[9,23],
[13,26],
[17,34],
[14,25],
[16,26],
[11,34],
[10,23],
[18,24],
[9,22],
[17,56],
[17,48],
[15,40],
[15,39],
[17,33],
[13,25],
[14,24],
[16,25],
[11,33],
[15,38],
[17,55],
[18,23],
[17,52],
[17,51],
[10,22],
[17,49],
[17,50],
[17,54],
[9,21],
[17,32],
[17,53],
[14,23],
[11,32],
[13,24],
[15,37],
[16,24],
[11,31],
[18,22],
[17,31],
[10,21],
[9,20],
[14,22],
[15,36],
[13,23],
[17,30],
[16,23],
[14,21],
[18,21],
[10,20],
[9,19],
[15,35],
[15,24],
[17,29],
[13,22],
[16,22],
[15,25],
[17,28],
[15,34],
[10,19],
[17,27],
[14,20],
[18,20],
[11,29],
[9,18],
[15,26],
[15,21],
[13,21],
[17,26],
[16,21],
[15,23],
[10,18],
[14,19],
[15,33],
[15,27],
[18,19],
[11,30],
[11,28],
[13,20],
[17,25],
[15,28],
[15,22],
[14,18],
[15,20],
[15,32],
[16,20],
[10,17],
[9,17],
[11,27],
[18,18],
[15,19],
[15,29],
[13,19],
[11,26],
[15,18],
[9,16],
[14,17],
[10,16],
[17,24],
[15,31],
[16,19],
[15,17],
[18,17],
[15,30],
[10,15],
[9,15],
[14,16],
[17,23],
[13,18],
[16,18],
[11,25],
[15,16],
[18,16],
[17,22],
[9,14],
[14,15],
[11,24],
[10,14],
[13,17],
[16,17],
[15,15],
[17,21],
[11,23],
[18,15],
[9,13],
[11,22],
[14,14],
[11,21],
[10,13],
[13,16],
[15,14],
[17,20],
[16,16],
[11,20],
[18,14],
[14,13],
[11,19],
[9,12],
[13,15],
[15,13],
[19,40],
[10,12],
[17,19],
[19,39],
[16,15],
[19,35],
[19,34],
[19,36],
[19,37],
[11,18],
[19,41],
[19,38],
[18,13],
[14,12],
[19,33],
[15,12],
[9,11],
[17,18],
[10,11],
[13,14],
[11,17],
[17,14],
[16,14],
[14,11],
[17,13],
[19,42],
[17,17],
[17,15],
[18,12],
[9,10],
[17,16],
[19,32],
[13,13],
[15,11],
[14,10],
[11,16],
[16,13],
[17,12],
[10,10],
[18,11],
[9,9],
[19,31],
[17,11],
[19,43],
[10,9],
[13,12],
[11,15],
[15,10],
[14,9],
[17,10],
[16,12],
[19,18],
[19,30],
[19,13],
[19,14],
[19,12],
[19,19],
[10,8],
[18,10],
[19,20],
[9,8],
[19,15],
[11,14],
[19,21],
[13,11],
[15,9],
[19,16],
[19,29],
[14,8],
[19,44],
[16,11],
[19,22],
[17,9],
[19,23],
[19,11],
[19,24],
[19,17],
[11,13],
[10,7],
[19,28],
[14,7],
[9,7],
[18,9],
[19,25],
[19,27],
[15,8],
[13,10],
[19,26],
[16,10],
[19,45],
[11,12],
[10,6],
[17,8],
[19,10],
[14,6],
[9,6],
[18,8],
[15,7],
[13,9],
[16,9],
[10,5],
[17,7],
[19,9],
[19,46],
[11,11],
[14,5],
[9,5],
[15,6],
[13,8],
[18,7],
[17,6],
[19,47],
[16,8],
[19,48],
[19,8],
[11,10],
[10,4],
[18,6],
[14,4],
[19,49],
[9,4],
[13,7],
[17,5],
[15,5],
[16,7],
[18,5],
[11,9],
[19,7],
[14,3],
[10,3],
[18,4],
[13,6],
[17,4],
[9,3],
[15,4],
[19,50],
[16,6],
[11,8],
[18,3],
[19,6],
[14,2],
[17,3],
[10,2],
[18,2],
[13,5],
[9,2],
[15,3],
[19,51],
[16,5],
[11,7],
[19,5],
[17,2],
[19,52],
[13,4],
[14,1],
[9,1],
[18,1],
[15,2],
[16,4],
[10,1],
[11,6],
[19,4],
[14,0],
[10,0],
[19,53],
[16,3],
[17,1],
[13,3],
[9,0],
[11,5],
[15,1],
[19,3],
[17,0],
[19,54],
[16,2],
[18,0],
[11,4],
[19,2],
[19,55],
[15,0],
[11,3],
[16,1],
[13,2],
[13,1],
[13,0],
[19,56],
[19,1],
[11,2],
[16,0],
[19,57],
[19,0],
[11,1],
[19,58],
[11,0],
[19,59],
[19,60],
[19,61],
[19,62],
[19,63],
[19,64],
[19,65],
[19,66],
[19,67],
[19,68],
[19,69],
[19,70],
[19,71],
[19,72],
[19,73],
[19,74],
[19,75],
[19,76],
[19,77],
[19,78],
[19,79]]


UDP_IP = "192.168.42.189"
UDP_PORT = 1337

print "UDP target IP:", UDP_IP
print "UDP target port:", UDP_PORT

sock = socket.socket(socket.AF_INET, # Internet
                     socket.SOCK_DGRAM) # UDP

COMMAND_DISABLE = 0
COMMAND_COLOR = 1
COMMAND_UPDATE_SETTINGS = 101
COMMAND_PIXEL = 103
COMMAND_PIXEL_RGB = 104

MODE_COMMANDS = 0
MODE_STREAM = 1

PALETTE_RAINBOW = 0
PALETTE_FOREST = 1

COLORTEMP_NONE = 0

STRIP_ALL = 22

#tree control functions

def send_command(command):                     
	sock.sendto(command, (UDP_IP, UDP_PORT))
	
def set_color(index,strip,hue,brightness):
	command_bytes = bytearray()
	command_bytes.append(index)
	command_bytes.append(COMMAND_COLOR)
	command_bytes.append(strip)
	command_bytes.append(hue)
	command_bytes.append(brightness)
	send_command(command_bytes)
	
def update_settings(palette,color_temp, display_mode):
	command_bytes = bytearray()
	command_bytes.append(0)
	command_bytes.append(COMMAND_UPDATE_SETTINGS)
	command_bytes.append(palette)
	command_bytes.append(color_temp)
	command_bytes.append(display_mode)
	send_command(command_bytes)	
	
def set_pixel_stream(strip,pixel, hue):
	command_bytes = bytearray()
	command_bytes.append(0)
	command_bytes.append(COMMAND_PIXEL)
	command_bytes.append(strip)
	command_bytes.append(pixel)
	command_bytes.append(hue)
	send_command(command_bytes)	
	
def set_pixel_rgb_stream(strip,pixel, red, green, blue):
	command_bytes = bytearray()
	command_bytes.append(0)
	command_bytes.append(COMMAND_PIXEL_RGB)
	command_bytes.append(strip)
	command_bytes.append(pixel)
	command_bytes.append(red)
	command_bytes.append(green)
	command_bytes.append(blue)
	send_command(command_bytes)	
	
def disable_all():
	for index in range(0,10):
		command_bytes = bytearray()
		command_bytes.append(index)
		command_bytes.append(COMMAND_DISABLE)
		send_command(command_bytes)
		
#camera functions

def flush_frames():
	for i in range(0,6):#hack to flush the read buffer
			vc.read()

def averaged_frame(frames_to_average):
	flush_frames()
	(rAvg, gAvg, bAvg) = (None, None, None)
	for frame_nr in range(0, frames_to_average):
		grabbed, frame = vc.read()#read next frame
		(B, G, R) = cv2.split(frame.astype("float"))#split to components   
	
		# if the frame averages are None, initialize them
		if rAvg is None:
			rAvg = R
			bAvg = B
			gAvg = G
	 
		# otherwise, compute the weighted average between the history of
		# frames and the current frames
		else:
			rAvg = ((frame_nr * rAvg) + (1 * R)) / (frame_nr + 1.0)
			gAvg = ((frame_nr * gAvg) + (1 * G)) / (frame_nr + 1.0)
			bAvg = ((frame_nr * bAvg) + (1 * B)) / (frame_nr + 1.0)
	
	avg = cv2.merge([bAvg, gAvg, rAvg]).astype("float")
	return avg
	
#set up detector for use in led detetction
# Setup SimpleBlobDetector parameters.
params = cv2.SimpleBlobDetector_Params()
 
# Change thresholds
#params.minThreshold = 10;
#params.maxThreshold = 200;
 
# Filter by Area.
params.filterByArea = True
params.minArea = 20
params.maxArea = 2000
 
# Filter by Circularity
params.filterByCircularity = False
params.minCircularity = 0.1
 
# Filter by Convexity
params.filterByConvexity = False
params.minConvexity = 0.87
 
# Filter by Inertia
params.filterByInertia = False
params.minInertiaRatio = 0.01

params.minRepeatability = 2

detector = cv2.SimpleBlobDetector_create(params) #cv2.SimpleBlobDetector()	
	
def detect_led_pixel(strip,pixel):
			
			#get ref frame (can be dropped if lighting is stable long-term)
			#~ flush_frames()
			#~ grabbed, ref_frame_raw = vc.read();
			#~ ref_frame = cv2.GaussianBlur(cv2.cvtColor(ref_frame_raw, cv2.COLOR_BGR2GRAY),(GAUSSIAN_BLUR_SIZE,GAUSSIAN_BLUR_SIZE),cv2.BORDER_DEFAULT);
			
			set_pixel_rgb_stream(strip,pixel,255,255,255)
				
			flush_frames()
			grabbed,current_frame = vc.read();
			current_frame = cv2.cvtColor(current_frame, cv2.COLOR_BGR2GRAY);#bw conversion
			blurred_frame = cv2.GaussianBlur(current_frame,(GAUSSIAN_BLUR_SIZE,GAUSSIAN_BLUR_SIZE),cv2.BORDER_DEFAULT)
			diff_frame = cv2.absdiff(blurred_frame, ref_frame)#remove reference
			
			#calculate threshold
			hi_percentage = 0.0005 # we want the hi_percentage brightest pixels
			# * histogram
			hist = cv2.calcHist([diff_frame], [0], None, [256], [0, 256]).flatten()
			# * find brightness threshold
			# here: highest thresh for including at least soandso image pixels
			total_count = diff_frame.shape[0] * diff_frame.shape[1]  # height * width
			target_count = hi_percentage * total_count # bright pixels we look for
			summed = 0
			for i in range(255, 0, -1):
				summed += int(hist[i])
				if target_count <= summed:
					hi_thresh = i
					break
			else:
				hi_thresh = 0	
					
			thr,thresholded_frame = cv2.threshold(diff_frame, hi_thresh, 255, cv2.THRESH_BINARY_INV);#apply threshold	
			thresholded_frame_blurred = cv2.GaussianBlur(thresholded_frame,(GAUSSIAN_BLUR_SIZE,GAUSSIAN_BLUR_SIZE),cv2.BORDER_DEFAULT)
			keypoints = detector.detect(thresholded_frame_blurred)#detect blobs
			im_with_all_keypoints = cv2.drawKeypoints(thresholded_frame, keypoints, np.array([]), (0,0,255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
			
			#select top candidate for highlighting based on intensity in center
			main_keypoint_intensity = 0
			main_keypoint_index = 0			
			if (len(keypoints) != 0):
				for keypoint_index in range(0,len(keypoints)):
					current_intensity = blurred_frame[int(keypoints[keypoint_index].pt[1])][int(keypoints[keypoint_index].pt[0])]
					if (current_intensity > main_keypoint_intensity):
						main_keypoint_intensity = current_intensity
						main_keypoint_index = keypoint_index
						
			main_keypoint = keypoints[main_keypoint_index:(main_keypoint_index+1)]
			
			
			im_with_keypoints_highlight = cv2.drawKeypoints(im_with_all_keypoints, main_keypoint, np.array([]), (0,255,0), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
			
			live_with_keypoints =  cv2.drawKeypoints(current_frame, keypoints, np.array([]), (0,0,255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
			live_with_keypoints = cv2.drawKeypoints(live_with_keypoints, main_keypoint, np.array([]), (0,255,0), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
			
			diff_with_keypoints =  cv2.drawKeypoints(diff_frame, keypoints, np.array([]), (0,0,255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
			diff_with_keypoints = cv2.drawKeypoints(diff_with_keypoints, main_keypoint, np.array([]), (0,255,0), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
					
			set_pixel_rgb_stream(strip,pixel,0,0,0)
			set_pixel_rgb_stream(strip,pixel,0,0,0)
			set_pixel_rgb_stream(strip,pixel,0,0,0)
			time.sleep(0.2)
			
			cv2.imshow("preview", live_with_keypoints.astype("uint8"))
			cv2.imshow("preview2", diff_with_keypoints.astype("uint8"))
			cv2.imshow("preview3", im_with_keypoints_highlight.astype("uint8"))
							
			cv2.waitKey(1)
			if (len(keypoints) == 0):
				result_str=str(strip)+","+str(pixel)+",-1,-1,NO_LED_FOUND"
				print(result_str)
				text_file.write(result_str+'\n')
			elif (len(keypoints) == 1):
				result_str=str(strip)+","+str(pixel)+","+str(keypoints[0].pt[0])+","+str(keypoints[0].pt[1])+",ONE_LED_FOUND"
				print(result_str)
				text_file.write(result_str+'\n')
			else:
				result_str=str(strip)+","+str(pixel)+","+str(keypoints[0].pt[0])+","+str(keypoints[0].pt[1])+",MULTIPLE_LEDS_FOUND"
				print(result_str)
				text_file.write(result_str+'\n')
	
	
#start main code

#blink and reset tree pixels
print("[INFO] setting initial tree configuration...")
update_settings(PALETTE_RAINBOW,COLORTEMP_NONE,MODE_COMMANDS)
set_color(0,STRIP_ALL,80,2)
time.sleep(0.1)
disable_all()	
update_settings(PALETTE_RAINBOW,COLORTEMP_NONE,MODE_STREAM)

	
#~ for trunk in range(0,8):
	#~ for pixel in range(20,50):
		#~ detect_led_pixel(trunk,pixel)		

#~ for branch in range(9,12)+range(13,20):
	#~ for pixel in range(0,90):
		#~ set_pixel_stream(branch,pixel,80)
		#~ time.sleep(0.001)
		#~ #print(str(branch)+','+str(pixel))
color = 0
colorstep = 120
UDP_DELAY = 0.00015
while True:
	
	color = color+colorstep
	if color>255:
		color=0
	for i in range(len(sorted_0_array)):
				#print(sorted_0_array[i][0])
				#print(sorted_0_array[i][1])
				set_pixel_stream(sorted_0_array[i][0],sorted_0_array[i][1],color)
				time.sleep(UDP_DELAY)
	
	color = color+colorstep	
	if color>255:
		color=0	
	for i in reversed(range(len(sorted_0_array))):
				#print(sorted_0_array[i][0])
				#print(sorted_0_array[i][1])
				set_pixel_stream(sorted_0_array[i][0],sorted_0_array[i][1],color)
				time.sleep(UDP_DELAY)
				
	color = color+colorstep
	if color>255:
		color=0
	for i in range(len(sorted_1_array)):
				#print(sorted_0_array[i][0])
				#print(sorted_0_array[i][1])
				set_pixel_stream(sorted_1_array[i][0],sorted_1_array[i][1],color)
				time.sleep(UDP_DELAY)
	
	color = color+colorstep		
	if color>255:
		color=0
	for i in reversed(range(len(sorted_1_array))):
				#print(sorted_0_array[i][0])
				#print(sorted_0_array[i][1])
				set_pixel_stream(sorted_1_array[i][0],sorted_1_array[i][1],color)
				time.sleep(UDP_DELAY)				

#exit	


